package main

import (
	"fmt"
)

const max = 4000000

// P002
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
func main() {
	fmt.Printf("P002A: %d\n", p002A(max))
	fmt.Printf("P002B: %d\n", p002B(max))
	fmt.Printf("P002C: %d\n", p002C(max))
	fmt.Printf("P002D: %d\n", p002D(max))
}

// フィボナッチ数列の第n項を取得する関数を定義してやる
func p002A(max int) int {
	sum := 0

	i := 2
	for f := fibA(1, 2, i); f <= max; f = fibA(1, 2, i) {
		sum += f
		i += 2
	}

	return sum
}

func fibA(a0, a1, n int) int {
	if n == 1 {
		return a0
	} else if n == 2 {
		return a1
	}

	return fibA(a0, a1, n-1) + fibA(a0, a1, n-2)
}

// フィボナッチ数列をあらかじめ生成しておいてから足す
func p002B(max int) int {
	fibs := fibB(1, 2, max)
	if len(fibs) < 2 {
		return 0
	}

	sum := 0
	for i := 2; i < len(fibs); i += 2 {
		sum += fibs[i]
	}

	return sum
}

func fibB(a0, a1, max int) []int {
	fibs := []int{0} // 初項の0はインデックスをずらすためのダミー
	if a0 > max {
		return fibs
	}
	fibs = append(fibs, a0)

	if a1 > max {
		return fibs
	}
	fibs = append(fibs, a1)

	n := a1
	f := a0 + a1
	for f <= max {
		fibs = append(fibs, f)
		n, f = f, f+n
	}

	return fibs
}

// フィボナッチ数列を生成しながら足す
func p002C(max int) int {
	if max < 1 {
		return 0
	}
	if max < 2 {
		return 1
	}

	a0, a1 := 1, 2
	sum := 0
	add := true
	for a1 <= max {
		if add {
			sum += a1
		}

		a0, a1 = a1, a0+a1
		add = !add
	}

	return sum
}

// フィボナッチ数列ジェネレータ
type fibonacciGenerator struct {
	a1 int
	a2 int
	ch chan int
}

func newFibonacciGenerator(a1, a2 int) *fibonacciGenerator {
	gen := fibonacciGenerator{
		a1: a1,
		a2: a2,
		ch: make(chan int),
	}

	go gen.start()

	return &gen
}

func (g *fibonacciGenerator) start() {
	g.ch <- g.a1
	g.ch <- g.a2

	for fib1, fib2 := g.a1, g.a2; ; fib1, fib2 = fib2, fib1+fib2 {
		g.ch <- fib1 + fib2
	}
}

func (g *fibonacciGenerator) Next() int {
	return <-g.ch
}

// フィボナッチ数列ジェネレータを使って足していく
func p002D(max int) int {
	gen := newFibonacciGenerator(1, 2)

	sum := 0
	for f, add := gen.Next(), false; f <= max; f, add = gen.Next(), !add {
		if add {
			sum += f
		}
	}

	return sum
}

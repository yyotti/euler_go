package main

import (
	"fmt"
)

const max = 4000000

// P002
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
func main() {
	fmt.Printf("P002A: %d\n", p002A(max))
	fmt.Printf("P002B: %d\n", p002B(max))
	fmt.Printf("P002C: %d\n", p002C(max))
	fmt.Printf("P002D: %d\n", p002D(max))
}

// フィボナッチ数列の第n項を取得する関数を定義してやる
func p002A(max uint) uint {
	sum := uint(0)

	for i := uint(1); ; i++ {
		f := fibA(i)
		if f > max {
			break
		}
		if f%2 == 0 {
			sum += f
		}
	}

	return sum
}

func fibA(n uint) uint {
	if n == 1 {
		return 1
	} else if n == 2 {
		return 2
	}

	return fibA(n-1) + fibA(n-2)
}

// フィボナッチ数列をあらかじめ生成しておいてから足す
func p002B(max uint) uint {
	fibs := fibB(max)
	if len(fibs) < 2 {
		return 0
	}

	sum := uint(0)
	for _, f := range fibs {
		if f%2 == 0 {
			sum += f
		}
	}

	return sum
}

func fibB(max uint) []uint {
	if max < 1 {
		return []uint{0}
	}
	if max < 2 {
		return []uint{0, 1}
	}

	fibs := []uint{0, 1, 2} // 初項の0はインデックスをずらすためのダミー

	a := uint(2)
	f := uint(3)
	for f <= max {
		fibs = append(fibs, f)
		a, f = f, f+a
	}

	return fibs
}

// フィボナッチ数列を生成しながら足す
func p002C(max uint) uint {
	if max < 2 {
		return 0
	}

	sum := uint(0)
	for a, f := uint(1), uint(2); f <= max; a, f = f, a+f {
		if f%2 == 0 {
			sum += f
		}
	}

	return sum
}

// フィボナッチ数列ジェネレータ
type fibonacciGenerator struct {
	ch chan uint
}

func newFibonacciGenerator() *fibonacciGenerator {
	gen := fibonacciGenerator{
		ch: make(chan uint),
	}

	go gen.start()

	return &gen
}

func (g *fibonacciGenerator) start() {
	g.ch <- 0
	g.ch <- 1

	for fib1, fib2 := uint(0), uint(1); ; fib1, fib2 = fib2, fib1+fib2 {
		g.ch <- fib1 + fib2
	}
}

func (g *fibonacciGenerator) Next() uint {
	return <-g.ch
}

// フィボナッチ数列ジェネレータを使って足していく
func p002D(max uint) uint {
	gen := newFibonacciGenerator()
	// 今回は初項が1、第2項は2なので、先頭から2つ落とす
	gen.Next()
	gen.Next()

	sum := uint(0)
	for f := gen.Next(); f <= max; f = gen.Next() {
		if f%2 == 0 {
			sum += f
		}
	}

	return sum
}

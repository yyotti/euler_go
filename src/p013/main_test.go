package main

import "testing"

var p013Tests = []struct {
	inNums   []string
	inCnt    int
	expected int64
}{
	// TEST0 {{{
	{
		inNums:   []string{},
		inCnt:    1,
		expected: 0,
	},
	// }}}
	// TEST1 {{{
	{
		inNums: []string{
			"3",
		},
		inCnt:    1,
		expected: 3,
	},
	// }}}
	// TEST2 {{{
	{
		inNums:   []string{"5", "16"},
		inCnt:    2,
		expected: 21,
	},
	// }}}
	// TEST3 {{{
	{
		inNums: []string{
			"37107287533902102798797998220837590246510135740250",
			"46376937677490009712648124896970078050417018260538",
		},
		inCnt:    10,
		expected: 8348422521,
	},
	// }}}
	// TEST4 {{{
	{
		inNums: []string{
			"37107287533902102798797998220837590246510135740250",
			"46376937677490009712648124896970078050417018260538",
		},
		inCnt:    -1,
		expected: 0,
	},
	// }}}
	// TEST5 {{{
	{
		inNums: []string{
			"37107287533902102798797998220837590246510135740250",
			"46376937677490009712648124896970078050417018260538",
		},
		inCnt:    0,
		expected: 0,
	},
	// }}}
}

func TestP013A(t *testing.T) {
	for i, tt := range p013Tests {
		actual := p013A(tt.inNums, tt.inCnt)
		if actual != tt.expected {
			t.Errorf("TEST %d: Expected %d but got %d", i, tt.expected, actual)
		}
	}
}

func TestP013B(t *testing.T) {
	for i, tt := range p013Tests {
		actual := p013B(tt.inNums, tt.inCnt)
		if actual != tt.expected {
			t.Errorf("TEST %d: Expected %d but got %d", i, tt.expected, actual)
		}
	}
}

func TestP013C(t *testing.T) {
	for i, tt := range p013Tests {
		actual := p013C(tt.inNums, tt.inCnt)
		if actual != tt.expected {
			t.Errorf("TEST %d: Expected %d but got %d", i, tt.expected, actual)
		}
	}
}

func TestP013D(t *testing.T) {
	for i, tt := range p013Tests {
		actual := p013D(tt.inNums, tt.inCnt)
		if actual != tt.expected {
			t.Errorf("TEST %d: Expected %d but got %d", i, tt.expected, actual)
		}
	}
}

var p013Bench = []string{
	"37107287533902102798797998220837590246510135740250",
	"46376937677490009712648124896970078050417018260538",
	"74324986199524741059474233309513058123726617309629",
	"91942213363574161572522430563301811072406154908250",
	"23067588207539346171171980310421047513778063246676",
	"89261670696623633820136378418383684178734361726757",
	"28112879812849979408065481931592621691275889832738",
	"44274228917432520321923589422876796487670272189318",
	"47451445736001306439091167216856844588711603153276",
	"70386486105843025439939619828917593665686757934951",
	"62176457141856560629502157223196586755079324193331",
	"64906352462741904929101432445813822663347944758178",
	"92575867718337217661963751590579239728245598838407",
	"58203565325359399008402633568948830189458628227828",
	"80181199384826282014278194139940567587151170094390",
	"35398664372827112653829987240784473053190104293586",
	"86515506006295864861532075273371959191420517255829",
	"71693888707715466499115593487603532921714970056938",
	"54370070576826684624621495650076471787294438377604",
	"53282654108756828443191190634694037855217779295145",
	"36123272525000296071075082563815656710885258350721",
	"45876576172410976447339110607218265236877223636045",
	"17423706905851860660448207621209813287860733969412",
	"81142660418086830619328460811191061556940512689692",
	"51934325451728388641918047049293215058642563049483",
	"62467221648435076201727918039944693004732956340691",
	"15732444386908125794514089057706229429197107928209",
	"55037687525678773091862540744969844508330393682126",
	"18336384825330154686196124348767681297534375946515",
	"80386287592878490201521685554828717201219257766954",
}

func BenchmarkP013A(b *testing.B) {
	for i := 0; i < b.N; i++ {
		p013A(p013Bench, 10)
	}
}

func BenchmarkP013B(b *testing.B) {
	for i := 0; i < b.N; i++ {
		p013B(p013Bench, 10)
	}
}

func BenchmarkP013C(b *testing.B) {
	for i := 0; i < b.N; i++ {
		p013C(p013Bench, 10)
	}
}

func BenchmarkP013D(b *testing.B) {
	for i := 0; i < b.N; i++ {
		p013D(p013Bench, 10)
	}
}

func ExampleP013() {
	main()

	// Output:
	// P013A: 5537376230
	// P013B: 5537376230
	// P013C: 5537376230
	// P013D: 5537376230
}

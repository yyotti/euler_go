package main

import (
	"fmt"
	"github.com/yyotti/euler_go/src/common"
)

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?

const cnt = 500

func main() {
	fmt.Printf("P012A: %d\n", p012A(cnt))
	fmt.Printf("P012B: %d\n", p012B(cnt))
}

func triangle(n int) int {
	return n * (n + 1) / 2
}

// 普通に割っていくやつ
func divisors(n int) []int {
	if n < 1 {
		return []int{1}
	}

	ds := []int{}
	for i := 1; i*i <= n; i++ {
		if n%i == 0 {
			if n/i == i {
				ds = append(ds, i)
			} else {
				ds = append(ds, []int{i, n / i}...)
			}
		}
	}

	return ds
}

func p012A(cnt int) int {
	for i := 1; ; i++ {
		t := triangle(i)
		ds := divisors(t)
		if len(ds) > cnt {
			return t
		}
	}
}

func divisorsCnt(n int, gen common.PrimeGenerator) int {
	if n < 0 {
		return 0
	}

	pf := common.PrimeFactors(int64(n), gen)

	s := 1
	for _, c := range pf {
		s *= c + 1
	}

	return s
}

func p012B(cnt int) int {
	gen := common.NewPrimeGenerator()
	for i := 1; ; i++ {
		t := triangle(i)
		if divisorsCnt(t, gen) > cnt {
			return t
		}
	}
}
